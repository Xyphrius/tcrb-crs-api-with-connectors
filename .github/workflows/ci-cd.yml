name: CI/CD - TCRB CRS API

on:
  push:
    branches: [ main ]
    tags: [ 'v*.*.*' ]
  workflow_dispatch:

permissions:
  contents: read
  packages: write    # needed to push to GHCR
  id-token: write    # (optional) for cloud OIDC if you extend later

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}   # ghcr.io/<owner>/<repo>
  NODE_VERSION: '20'

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install deps (lockfile respected)
        run: npm ci

      - name: Lint & test (skip if none)
        run: |
          npm run lint || echo "no lint"
          npm test || echo "no tests"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=sha

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          platforms: linux/amd64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Write kubeconfig
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBE_CONFIG_B64 }}" | base64 -d > $HOME/.kube/config

      - name: Set image tag from build (prefer tag/sha)
        id: tag
        run: |
          echo "IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ needs.build-and-push.outputs.digest }}" >> $GITHUB_OUTPUT || true
          # Fallback: latest sha tag if digest not exposed by your runner
          echo "TAGGED=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: Kube apply service/deployment
        run: |
          kubectl apply -f k8s/service.yaml
          kubectl apply -f k8s/deployment.yaml

      - name: Patch Deployment image
        run: |
          IMG="${{ steps.tag.outputs.TAGGED }}"
          kubectl set image deployment/tcrb-crs-api api=$IMG
          kubectl rollout status deployment/tcrb-crs-api --timeout=120s
